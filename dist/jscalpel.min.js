(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.jscalpel = factory());
}(this, (function () { 'use strict';

var Jscalpel = function Jscalpel(_ref, defaultOpts) {
    var target = _ref.target,
        keys = _ref.keys,
        prefix = _ref.prefix,
        callback = _ref.callback,
        deep = _ref.deep;

    var nativeToString = Object.prototype.toString;
    var deepCopy = function deepCopy(obj) {
        var returnObj = {};
        var tempArr = [];
        if (nativeToString.call(obj) === ['object Object']) {
            Object.keys(obj).forEach(function (key, index) {
                if (Array.isArray(obj[key])) {
                    obj[key].forEach(function (value, index) {
                        tempArr.push(value);
                    });
                    returnObj[key] = tempArr;
                    tempArr = [];
                } else if (nativeToString.call(obj[key] === '[object Object]')) {
                    returnObj[key] = deepCopy(obj[key]);
                }
            });
            return returnObj;
        } else {
            return obj;
        }
    };
    var autoCompleteKey = function autoCompleteKey(key) {
        return '' + (prefix ? prefix + '.' + key : '' + key);
    };
    var defaultValue = null;
    var result = null;
    var epTarget = null;
    try {
        epTarget = typeof target === 'string' ? JSON.parse(target) : target;
        if (deep) {
            alert('isDeepCopy');
            epTarget = deepCopy(epTarget);
        }
        if (!nativeToString.call(epTarget) === '[object Object]') {
            console.error('传入的target不是有效的json或者object');
            return;
        }
    } catch (err) {
        console.error('传入的target不是有效的json或者object');
        return;
    }
    if (typeof keys === 'string' && keys.length > 0) {

        ('' + autoCompleteKey(keys)).split('.').forEach(function (value, index) {
            result = result ? result[value] : epTarget[value];
        });
        if (callback && typeof callback === 'function') {
            
            defaultValue = callback.call(null, result, epTarget, keys, defaultOpts);
        } else {
            defaultValue = callback;
        }
        if (typeof defaultValue === 'undefined') {
            return result || defaultOpts;
        }
        return defaultValue;
    } else if (nativeToString.call(keys) === '[object Array]') {
        var pResult = [];
        keys.forEach(function (singlePath, index) {
            result = null;
            if (typeof singlePath === 'string') {
                ('' + autoCompleteKey(singlePath)).split('.').forEach(function (value, index) {
                    result = result ? result[value] : epTarget[value];
                });
                pResult.push(result);
            }
        });
        pResult.push(epTarget, keys, defaultOpts);
        if (callback && typeof callback === 'function') {
            defaultValue = callback.apply(null, pResult);
        } else {
            defaultValue = callback;
        }
        if (typeof defaultValue === 'undefined') {
            return pResult || defaultOpts;
        }
        return defaultValue;
    }
};

return Jscalpel;

})));
